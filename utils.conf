#!/usr/local/bin/bash
# Author: Stephen Harold Smith Sat 24 Jun '23

# -= Notes: Rules and quidelines =-
#| Newline characters should be insterted by Script and not by this wrapper.
#| Exiting is the oppiste and should only be handled here in utils.
#| Each script should have a 'requireSudo' variable set to '1' if sudo is required.
#|
#|

declare -g -A sar=(\
['h']="helpText" \
['b']="bannerFile" \
['c']="listColors" \
['e']="listEnVars" \
['l']="ListenEstablished" \
['u']="listUsers" \
['n']="networkState" \
['r']="readInMessage" \
['p']="sanatizePATH" \
['s']="sysSetupGets" );

declare -A helpTextArray=(\
['b']="Displays the utils application banner usualy displayed in the help menu" \
['h']="Displays the help text to provide the user with the information requireed to use the utils wrapper" \
['c']="Displays all the numbers from 1 to 254 of the colors the created with the tput command. example: ${codeclr} tput setaf <number> ${rst}" \
['e']="Displays all the enviromental variables exported to the current terminal. To see the raw output use ${codeclr} printenv ${rst}" \
['l']="Displays all the network sockets currently in ${ul}listening${lu} mode awaiting inbound connections." \
['n']="Displays current network information for the active network interfaces." \
['p']="Displays the current system PATH with each entry on it's own line." \
['r']="Not really sure if I wtrote this or how it got here. I don't remember writing it.." \
['s']="Gets and neatly displays all the cuurent information stored in the systemSetup application" \
['u']="Displays all users currently active on the system using the dscl application. See ${codeclr} man dscl ${rst} for more information." );

# Set value to On to enable debugging, Off to disable it.
declare -g debugging="Off"; 
declare -g fileName;
declare -g requireSudo;

# Utils commonly used variables and functions.
declare -f -g debug;
declare -g dmsg="Not set";
declare -g dmsgclr=$(tput setaf 4);
declare -g codeclr=$(tput setab 240; tput setaf 15;);
declare -g hdr=$(tput setaf 15; tput smul;);
declare -g wht=$(tput setaf 15;);
declare -g red=$(tput setaf 9;);
declare -g grn=$(tput setaf 2;);
declare -g ylw=$(tput setaf 11;);
declare -g blu=$(tput setaf 4;);
declare -g org=$(tput setaf 166;);
declare -g ul=$(tput smul;); # underline start
declare -g lu=$(tput rmul;); # underline remove
declare -g rst=$(tput sgr0;);

# -= Debug: common debig function for all scripts =-
function debug() {
    [[ "$dmsg" = "Not set" ]] && dmsg="Debug is enable but no message (variable name: $dmsg) was passed to the function call";
    [[ "$debugging" = "On" ]] && echo "${wht}:| ${red}$(date +%H:%M:%S) | DEBUG | ${dmsgclr}${dmsg}${rst}";
}

# -= Exception: Print errors messages and exit with not zero =-
function throwEx() {
	local scriptName=$1;
	local funcName=$2;
    local erMsg=$3;
    local erNum=$4;
    echo -e "\n${wht}-=$red FATAL EXCEPTION UTILS $wht=-$rst";
	[[ ! -z $scriptName ]] && echo "${red}Scrpit name:$wht $scriptName$rst";
	[[ ! -z $funcName ]] && echo "${red}Function name:$wht $funcName$rst";
	[[ ! -z $userInput ]] && echo "${red}User entered:$wht $userInput$rst";
	[[ ! -z $fileName ]] && echo "${red}Script name:$wht $fileName";
	[[ -z $erMsg ]] && echo "${wht}No error message provided with exception$rst" || echo "${red}Error message:$wht $erMsg$rst";
	printf "\n\r";
    exit $erNum;
}
