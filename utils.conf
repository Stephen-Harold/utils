#!/usr/local/bin/bash
# Author: Stephen Harold Smith Sat 24 Jun '23

# -= Notes: Rules and quidelines =-
#| Newline characters and formation should be handled by each script and not by the utils wrapper.
#| Exiting the application should idealy be handled in the utils wrapper
#| with the exception of the common function of exception handling.
#| Each script should have a 'requireSudo' variable set to '1' if sudo is required.
#| Any common variables are set in the conf file with 'decalre -g' along with common functions.
#| 

# declare scripts and thier assigned character
declare -g -A sar=(\
['h']="helpText" \
['b']="bannerFile" \
['c']="listColors" \
['e']="listEnVars" \
['l']="ListenEstablished" \
['u']="listUsers" \
['n']="networkState" \
['r']="readInMessage" \
['p']="sanatizePATH" \
['s']="sysSetupGets" );

# using the charqcters to assign description for each script and then shown in the help text
declare -A helpTextArray=(\
['b']="Displays the utils application banner usualy displayed in the help menu" \
['h']="Displays the help text to provide the user with the information requireed to use the utils wrapper" \
['c']="Displays all the numbers from 1 to 254 of the colors the created with the tput command. example: ${codeclr} tput setaf <number> ${rst}" \
['e']="Displays all the enviromental variables exported to the current terminal. To see the raw output use ${codeclr} printenv ${rst}" \
['l']="Displays all the network sockets currently in ${ul}listening${lu} mode awaiting inbound connections." \
['n']="Displays current network information for the active network interfaces." \
['p']="Displays the current system PATH with each entry on it's own line." \
['r']="Not really sure if I wtrote this or how it got here. I don't remember writing it.." \
['s']="Gets and neatly displays all the cuurent information stored in the systemSetup application" \
['u']="Displays all users currently active on the system using the dscl application. See ${codeclr} man dscl ${rst} for more information." );

# scripts requiring sudo have thier char added
declare -g reqSudo=( 's' );
# set value to On to enable debugging, Off to disable it.
declare -g debugging="Off";
# the name of the script when taken from the array
declare -g fileName;
# the debug function and message for global use
declare -f -g debug;
declare -g dmsg="Not set";
# colors and format
declare -g dmsgclr=$(tput setaf 4);
declare -g codeclr=$(tput setab 240; tput setaf 15;);
declare -g hdr=$(tput setaf 15; tput smul;);
declare -g wht=$(tput setaf 15;);
declare -g red=$(tput setaf 9;);
declare -g grn=$(tput setaf 2;);
declare -g ylw=$(tput setaf 11;);
declare -g blu=$(tput setaf 4;);
declare -g org=$(tput setaf 166;);
declare -g ul=$(tput smul;); # underline start
declare -g lu=$(tput rmul;); # underline remove
declare -g rst=$(tput sgr0;);

# -= Debug: common debig function for all scripts =-
function debug() {
    [[ "$dmsg" = "Not set" ]] && dmsg="Debug is enable but no message (variable name: $dmsg) was passed to the function call";
    [[ "$debugging" = "On" ]] && echo "${wht}:| ${red}$(date +%H:%M:%S) | DEBUG | ${dmsgclr}${dmsg}${rst}";
}

# -= Exception: Print errors messages and exit with not zero =-
function throwEx() {
	local scriptName=$1;
	local funcName=$2;
    local erMsg=$3;
    local erNum=$4;
    echo -e "\n${wht}-=$red FATAL EXCEPTION UTILS $wht=-$rst";
	[[ ! -z $scriptName ]] && printf "${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "Scrpit name:" "$scriptName$rst";
	[[ ! -z $funcName ]] && printf "${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "Function name:" "$funcName$rst";
	[[ ! -z $userInput ]] && printf "${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "User entered:" "$userInput$rst";
	[[ ! -z $fileName ]] && printf "${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "Script name:" "$fileName";
	[[ -z $erMsg ]] && printf "${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "Error Message:" "No error message provided with exception" || \
						printf "${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "Error Message:" "$erMsg$rst";
    [[ $5 -eq 1 ]] && printf "${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "Help text:" "Use h for a lis of options."
    [[ $5 -eq 1 ]] && printf "${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "Example:" "${rst}$codeclr utils h $rst"
	printf "\n\r";
    [[ -z $erNum ]] && exit 1 || exit $erNum
}
