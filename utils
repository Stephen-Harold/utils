#!/usr/local/bin/bash
# shellcheck disable=SC2034,SC2154,SC2250
# Author: Stephen Harold Smith Sat 24 Jun '23

# -= Notes: Rules and guidelines =-
#| Newline characters should be inserted by Script and not by this wrapper.
#| Exiting is the opposite and should only be handled here in utils.
#| Each script should have a 'requireSudo' variable set to '1' if sudo is required.
#|
#|

# -= {ScriptName}: get script name from array =-
function setScriptName() {
	# shellcheck disable=SC2154
	for s in "${!sar[@]}"
	do
		DEBUG "utils: \(setScriptName\)" "Testing $s against ${userInput}";
		if [[ $s = "${userInput}" ]]
		then
			scriptName=${sar[$s]};
			DEBUG "utils: \(setScriptName\)" "Breaking, match found for inside loop: ${scriptName}";
			break;
		fi
	done

	# TEST FILE SYSTEM & THROW EXCEPTION ON NON-EXISTING FILE
	[[ -d "${scriptDir}" ]] && DEBUG "utils: (executeScript)" "${scriptDir} directory exists" || \
		throwEx "utils" "executeScript" "'$( basename ${scriptDir} )' directory is not available." 106 0

	[[ -x "${scriptDir}/${scriptName}" ]] && DEBUG "utils: \(setScriptName\)" "File name is set to ${scriptName}" || \
		throwEx "utils" "setScriptName" "'${userInput}' does not have a file associated with it, no file found in array." 104 1
}

# -= Execution: Make sure the script is available and fire it up =-
function executeScript() {
	# True if $scriptName is set with value
	[[ -v ${scriptName} ]] && throwEx "utils" "executeScript" "The script file has not been set, cannot continue." 105 0 || \
		DEBUG "utils: (executeScript)" "${scriptName} exists";

	[[ -r "${scriptDir}/${scriptName}" ]] && DEBUG "utils: (executeScript)" "${scriptDir}/${scriptName} is readable, will be executed next" || \
		throwEx "utils" "executeScript" "Permissions are wrong on ${scriptDir}/${scriptName}, it isn't readable." 107 0

	# Execute Script...
	# shellcheck disable=SC1090
	. "${scriptDir}/${scriptName}";
	DEBUG "utils: (executeScript)" "${scriptDir}/${scriptName} executed succesfully";
}

function sudoRequiredTest() {
	# check if sudo is required
	for v in "${reqSudo[@]}"
	do
		DEBUG "Utils (sudoRequiredTest)" "(sudo test) Testing $v against user input: ${userInput}";
		if [[ "$v" = "${userInput}" ]] && [[ "${USER}" != "root" ]]
		then
			DEBUG "utils: (sudoRequiredTest)" "Required: Yes, $v does require sudo, current user is ${USER}";
			echo -e "\n\r${ylw}${ul}sudo${lu}${grn} is required to run this script";
			echo -e "re-run using: ${codeclr} sudo utils ${userInput} ${rst} ${grn}or just enter ${codeclr} sudo !! ${rst}\n\r";
			exit 107;
		else
			DEBUG "utils: (sudoRequiredTest)" "sudo is ${ul}not${lu} required?";
		fi
	done
}

#################################################=-
###################################################=-
# -= ENTRY POINT: Application workflow starts here =-
###################################################=-
#################################################=-

# get common functions and variables
confFile="/usr/local/lib/utils.d/conf/utils.conf";
# shellcheck disable=SC1090
[[ -x ${confFile} ]] && source ${confFile}; DEBUG "utils (ENTRY POINT)" "Configuration file loaded" || \
	throwEx "utils (ENTRY POINT)" "get configuration file" "Configuration file not available at ${confFile}" 101 0

# 102 -z returns True if the first argument has no value
[[ -v $1 ]] && throwEx "utils (ENTRY POINT)" "No option was set by User" "An option is required to select a script." 102 1 || DEBUG "Entry Point" "Argument: $1";

# trim user input to a single char (if possible) and declare as read-only variable
# shellcheck disable=SC2155
declare -r userInput="$( echo "$1" | tr '-' " " | tr -d " " )";

# set and test the number of chars in the variable
argCount="${#userInput}";

DEBUG "utils: (ENTRY POINT)" "Number characters in users argument is ${argCount}";
[[ ${argCount} -gt 1 ]] && throwEx  "utils (ENTRY POINT)" "Argument lenght?" "Invalid argument lenght." 103 1;



setScriptName;
sudoRequiredTest;
executeScript;

unset -f setScriptName;
unset -f executeScript;
unset confFile;
unset argCount;
declare +r "$userInput";
# clean exit
exit 0;
