#!/bin/bash
# Author: Stephen Harold Smith Sat 24 Jun '23

# -= Notes: Rules and quidelines =-
#| Newline characters should be insterted by Script and not by this wrapper.
#| Exiting is the oppiste and should only be handled here in utils.
#|
#|
#|

# -= Chars: Script names =-
#| h = helpText
#| c = listColors
#| e = listEnvVars
#| u = listUsers
#| n = networkState
#| r = readInMessage
#| p = sanatizePATH
#| s = sysSetupGets

declare -a scriptArray;
scriptArray=(\
		[h]="helpText"\
		 [c]="listColors"\
		 [e]="listEnVars"\
		 [u]="listUsers"\
		 [n]="networkState"\
		 [r]="readInMessage"\
		 [p]="sanatizePATH"\
		 [s]="sysSetupGets" );

# array of chars that will need sudo to run
reqSudo=( "g" );

# -= Exception: Print errors messages and exit with not zero =-
function throwEx() {
	local msg=$1;

	exScript "helpText";
	printf "\n\r\e[1;31m%s \n\rArgument:'%s'\e[m\n\r" "$msg" "$userInput";

	exit -3;
}

# -= Execution: Make sure the script is available and fire it up =-
function exScript() {
	local fileName=$1;
	local prefix='/usr/local/bin/utils.d';

	[[ ! -r $prefix/$filename ]] && throwEx "$fileName not found in $prefix.";
	# Execute Script...
	. $prefix/$fileName;
}

# -= Entry Point: Application workflow starts here =-

# Get common functions and variables
confFile="/usr/local/bin/utils.d/utils.conf";
[[ -r $confFile ]] && source $confFile || echo "Configuration file not available at $confFile"

# -z returns True if the first argument has no value
[[ -z $1 ]] && throwEx "Argument required, use 'h' for valid arguments.";

# trim user input to a single char (if possible) and declare as read-only variable
declare -r userInput=$(echo $1 | tr '-' " " | tr -d " ");

# Set and test the number of chars in the variable
argCount=$(echo ${#userInput});

dmsg="Number characters in users argument is $argCount"; debug;
[[ $argCount -gt 1 ]] && throwEx "Invalid argument lenght, use 'h' for valid arguments.";

# Check if listed as requiring sudo
for char in $reqSudo
do
	dmsg="Checking if '$userInput' requires sudo?"; debug;
	if [[ "$char" = "$userInput" ]]
	then
		dmsg="User input '$userInput' ${ul}matches${lu} '$char', sudo required!" debug;
		echo "You need administrator privilege to run the $userInput scipt.";
		echo -e "Use ${codeclr} sudo utils g ${rst} to run ${userInput}'s script";
		exit 101;
	else
		dmsg="No, '$userInput' doesn't require sudo prefix."; debug;
	fi
done

# -= Match: Convert users argument into a script selection =-
case $userInput in

	b)
	exScript "bannerFile";
	;;

	h)
	exScript "helpText";
	;;

	c)
	exScript "listColors";
	;;

	e)
	exScript "listEnvVars";
	;;

	l)
	exScript "listening";
	;;

	n)
	exScript "networkState";
	;;

	p)
	exScript "sanatizePATH";
	;;

	r)
	exScript "readInMessage";
	;;

	s)
	exScript "sysSetupGets";
	;;

	u)
	exScript "listUsers";
	;;

	*)
	exScript "helpText";
	;;
esac
