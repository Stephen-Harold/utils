#!/usr/local/bin/bash
# Author: Stephen Harold Smith Sat 24 Jun '23

# -= Notes: Rules and quidelines =-
#| Newline characters should be insterted by Script and not by this wrapper.
#| Exiting is the oppiste and should only be handled here in utils.
#| Each script should have a 'requireSudo' variable set to '1' if sudo is required.
#|
#|

# -= ScriptName: get script name from array =-
function getFileName() {
	for s in ${!sar[@]}
	do
		dmsg="Testing $s against $userInput"; debug;
		if [[ $s = $userInput ]]
		then
			dmsg="Match found for script name $s = $userInput"; debug;
			fileName=${sar[$s]};
			break;
		else
			dmsg="No match: '$s' != '$userInput'"; debug;
			continue;
		fi
	done
	[[ -z $fileName ]] && throwEx "utils" "getFileName" "The '$userInput' does not have a file associated with it, no file found in array." 104;
	dmsg="File name is set to $fileName"; debug;
}

# -= Execution: Make sure the script is available and fire it up =-
function exScript() {
	[[ -z $fileName ]] && throwEx "utils" "exScript" "The file name has not been set, cannot continue." 105;
	local prefix='/usr/local/bin/utils.d';

#	[[ -r "$prefix/$fileName" ]] && throwEx "utils" "exScript" "$fileName not found in $prefix" 106;
	# Execute Script...
	. $prefix/$fileName;
}

# -= Entry Point: Application workflow starts here =-

# Get common functions and variables
confFile="/usr/local/bin/utils.d/utils.conf";
[[ -r $confFile ]] && source $confFile || throwEx "utils" "get configuration file" "Configuration file not available at $confFile" 101;

# -z returns True if the first argument has no value
[[ -z $1 ]] && throwEx "utils" "Argument set?" "Argument required, use 'h' for valid arguments." 102;

# trim user input to a single char (if possible) and declare as read-only variable
declare -r userInput=$(echo $1 | tr '-' " " | tr -d " ");

# Set and test the number of chars in the variable
argCount=$(echo ${#userInput});

dmsg="Number characters in users argument is $argCount"; debug;
[[ $argCount -gt 1 ]] && throwEx  "utils" "Argument lenght?" "Invalid argument lenght, use 'h' for valid arguments." 103;

# get chars relative script filename and check if sudo is required
getFileName;
exScript;
