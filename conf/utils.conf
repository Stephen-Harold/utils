#!/usr/local/bin/bash
# Author: Stephen Harold Smith Sat 24 Jun '23

# -= Notes: Rules and quidelines =-
#| Newline characters and formation should be handled by each script and not by the utils wrapper.
#| Exiting the application should idealy be handled in the utils wrapper
#| with the exception of the common function of exception handling.
#| Each script should have a 'requireSudo' variable set to '1' if sudo is required.
#| Any common variables are set in the conf file with 'decalre -g' along with common functions.
#| For values set inside loops use the valvar.json file in the temp directory.
#|

# declare scripts and thier assigned character
declare -g -A -x sar=(\
		['c']="listColors" \
		['d']="listDefaults" \
		['e']="listEnVars" \
		['h']="listHelp" \
		['l']="listLaunchd" \
		['n']="listNetInfo" \
		['p']="listPATH" \
		['s']="listSysSetup" \
		['y']="listSysctl" \
		['u']="listUsers" \
		['i']="disableIPv6" \
	);

# using the characters to assign description for each script and then shown in the help text
declare -g -A -x helpTextArray=(\
['h']="Displays the help text to provide the user with the information requireed to use the utils wrapper" \
['c']="Displays all the numbers from 1 to 254 of the colors the created with the tput command. example: ${codeclr} tput setaf <number> ${rst}" \
['e']="Displays all the enviromental variables exported to the current terminal. To see the raw output use ${codeclr} printenv ${rst}" \
['n']="Displays all the network sockets currently in ${ul}listening${lu} mode awaiting inbound connections." \
['n']="Displays current network information for the active network interfaces." \
['p']="Displays the current system PATH with each entry on it's own line." \
['s']="Gets and neatly displays all the cuurent information stored in the systemSetup application" \
['u']="Displays all users currently active on the system using the dscl application. See ${codeclr} man dscl ${rst} for more information." \
['a']="Functions of ${codeclr}launchctl${rst} to manage system services and auto-starting applications." \
['y']="From ${codeclr}sysctl -a${rst} list each of the keys and asks the user to select one of the available keys and then dislays the keys value;" \
['i']="Disable the IPv6 protocol on lo0 and en0 (Wi-Fi). The only ouput from the script is on task completion, 4 altogether." );
# application directory
declare -g -x prefix="/usr/local/lib/utils.d";
# scripts directory
declare -g -x scriptDir="${prefix}/scripts";
# configuration directory
declare -g -x confDir="${prefix}/conf";
# scripts requiring sudo have their char added
declare -g -x reqSudo=( 's' 'i' );
# the name of the script when taken from the array
declare -g scriptName="null";
# the debug function and message for global use
declare -f -g debug;
declare -g dmsg="null";
# set value to On to enable debugging, Off to disable it.
[[ -z ${UTILS_DEBUG} ]] && [[ "${utilsDebug}" = "On" ]] && declare -g debugging="On" ||  declare -g debugging="Off"
# Set to 1 to enable debugging
debug_enabled=0;
[[ -n ${UTILS_DEBUG} ]] && export UTILS_DEBUG=${debug_enabled};
# colors and format
declare -g dmsgclr;
dmsgclr=$(tput setaf 4);
declare -g -x codeclr;
codeclr=$(tput setab 240; tput setaf 15;);
declare -g -x hdr;
hdr=$(tput setaf 15; tput smul;);
declare -g -x wht;
wht=$(tput setaf 15;);
declare -g -x red;
red=$(tput setaf 9;);
declare -g -x grn;
grn=$(tput setaf 2;);
declare -g -x ylw;
ylw=$(tput setaf 11;);
declare -g -x blu;
blu=$(tput setaf 4;);
declare -g -x org;
org=$(tput setaf 166;);
declare -g -x ul;
ul=$(tput smul;); # underline start
declare -g -x lu;
lu=$(tput rmul;); # underline remove
declare -g -x rst;
rst=$(tput sgr0;);
# file to keep integration previous value for loop break/continue
[[ -d '/tmp/utils.d' ]] && mkdir '/tmp/utils.d'
declare -g -u -x KEYFILE="/tmp/utils.d/valvar.json"

# -= Debug: common debug function for all scripts =-
function debug() {
    if [[ "${debugging}" = "On" ]]
    then
      [[ "${dmsg}" = "Not set" ]] && dmsg="Debug is enable but no message (variable name: ${dmsg}) was passed to the function call";
      echo "${wht}:| ${red}$(date +%T.%3N) | DEBUG | ${dmsgclr}${dmsg}${rst}";
    fi
}

# -= Exception: Print errors messages and exit with not zero =-
#| throwEx( ScriptName, FunctionName, ErrorMessage, ErrorNumber ); C# syntax
function throwEx() {
	local scriptName=$1;
	local functionName=$2;
  	local errorMessage=$3;
  	local errorNumber=$4;
  	local showHelp=$5;
  	echo -e "\n${wht}-=${grn} Utils:$red Exited Application with an Error ${ylw}(No. ${red}$errorNumber${ylw}) ${wht}=-$rst";
	[[ ! -z $scriptName ]] && printf "${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "Scrpit name:" "${scriptName}$rst";
	[[ ! -z $functionName ]] && printf "${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "Function name:" "${functionName}$rst";
	[[ ! -z $userInput ]] && printf "${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "User entered:" "${userInput}$rst";
	[[ ! -z $fileName ]] && printf "${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "Script name:" "${fileName}";
	[[ -z $errorMessage ]] && printf "${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "Error Message:" "No error message provided with exception" || \
	printf "${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "Error Message:" "$errorMessage$rst";
	[[ ! -z $errorNumber ]] && printf "${grn}%-16s${rst}${red}%-64s${rst}\n\r" "Error Number:" "${errorNumber}";
	[[ $showHelp = 1 ]] && printf "${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "Help text:" "Use h for a lis of options.\n\r${grn}%-16s${rst}${ylw}%-64s${rst}\n\r" "Example:" "${rst}${codeclr} utils h $rst";
	printf "\n\r";
  	[[ -z $errorNumber ]] && exit 1 || exit $errorNumber
}
